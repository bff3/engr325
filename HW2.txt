1)
  a)
    addi x28, x0, 8
    sub x28, x30, x28
    add x28, x29, x28
  b)
    a = d + (b + c);
2)
  a)
    int temp = data[1];
    data[1] = data[2];
    data[2] = temp;
    temp = data[4];
    for(int i = 1; i < 5; i++){
      data[i] = data[i-1];
    }
    data[0] = temp;
  b)
    ld x28, 24(x20);
    ld x29, 32(x20);
    sd x29, 24(x20);
    sd x28, 32(x20);
    ld x28, 8(x20);
    ld x29, 24(x20);
    sd x29, 8(x20);
    sd x28, 24(x20);
    ld x28, 0(x20);
    ld x29, 8(x20);
    sd x29, 0(x20);
    sd x28, 8(x20);
3)
  big endian:
    address,Data
    00000,AB
    00001,CD
    00010,EF
    00011,12
  Little endian:
    address,Data
    00000,12
    00001,EF
    00010,CD
    00011,AB
4)
  10*16^7+11*16^6+12*16^5+13*16^4+14*16^3+15*16^2+1*16^1+2*16^0
  =2882400018
5)
  R-type, add x1, x1, x1
6)
  =100100_01010_011_00101_0000011
  I-type
  ld x5, 36(x10)
7)
  s-type
  0000001_00101_11110_011_00000_0100011
  =0x25f3023
8)
  R-type
    0100000_00111_00110_000_11100_0110011
    =0x40730e33
9)
  R-type
  sub x5, 7x, 5x
  0100000_00101_00111_000_00101_0110011
10)
  I-type
  ld x3, 4(x27)
  000000000100_1011_011_00011_0000011
11)
  a)
    the rs1,rs2, and rd register address fields
    would have to be expanded to 6 bits. New
    funct7 codes could be added.
  b)
    rs1 and rd would be 6 bits. func3 would be
    expanded to 5 bits
  c)
    could decrease the size of program because
    complicated instruction combinations can be simplified.
    could be larger because each instruction is longer
    so programs with lots of simple instructions would be longer.
12)
  addi x29, x0, 0xfff
  xor x5, x6, x29
13)
  +-2^18
  0x1ffc0000 -> 0x20040000
14)
  +-2^12 range
  1ffff000 to 20001000
15)
  0x1FFFF000 + 2^12 = 0x20000000
  which is less than 0x20014924 so no
16)
  a)
    500 * 0.75 *1.1 + 10*1.1*300+3*1.1*100 = 4042.5
    whereas 500 * 1 + 10*300+3*100 = 3800
  b)
    14/13.5 = 1.037
  c)
    14/13.1 =1.067
